import sys
import traceback

from aiogram import BaseMiddleware
from aiogram.types import Update
from loguru import logger


class ErrorLoggingMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: Update, data: dict):
        try:
            return await handler(event, data)
        except Exception as e:
            # Получаем информацию о текущем исключении
            exc_type, exc_value, exc_traceback = sys.exc_info()

            # Формируем стек вызовов
            tb = traceback.extract_tb(exc_traceback)

            # Фильтруем стек вызовов, исключая файлы из .venv и logg_mdw
            filtered_tb = [
                (filename, lineno, funcname, text)
                for filename, lineno, funcname, text in tb
                if not (".venv" in filename or "logg_mdw" in filename)
            ]

            if filtered_tb:
                # Берем последний элемент из отфильтрованного стека
                filename, lineno, funcname, _ = filtered_tb[-1]
                logger.error(f"Ошибка: {str(e)}")
                logger.error(f"Ошибка произошла в файле: {filename}, строка: {lineno}, в функции: {funcname}")
            else:
                logger.error(f"Ошибка: {str(e)}")
                logger.error("Ошибка произошла в коде, который не относится к вашему проекту.")
